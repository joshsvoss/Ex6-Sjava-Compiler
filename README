joshsvoss



=============================
=      File description     =
=============================

************************

PACKAGE: oop.ex6.main :  This package contains the main method and its class, Sjavac.java. It also
contains the parser and all of the exceptions that are thrown in the parser and not in the 
deeper methods that it calls.  

DoubleDeclarationInScopeException.java - This Exception is to be thrown when two variable of the same 
name are declared in the same scope.

GlobalClosingBracketException.java - This exception is thrown when the parser encounters a closing bracket 
in the global scope.

GlobalIfWhileException.java - This exception is thrown when the parser encounters an if or while block in 
the global scope. 

GlobalMethodCallException.java - This exception is thrown when a method is called in the global scope.

GlobalReturnException.java - This exception is thrown when a return statement is encountered 
in the global scope.

IncorrectVariableSyntaxException - This exception is thrown when a variable is declared with 
incorrect syntax.  

MissingMethodReturnException.java -  This exception is thrown when a method is missing its return 
statement.  

NestedMethodDeclarationException.java - This exception is thrown when a method is declared inside another.  

Parser.java - This class handles reading in the Sjava file and parsing through it.

Sjavac.java - This class is the driver class of the Sjava code legality verifier. 

SJavacException.java - This is the parent exception for all exceptions of Sjava syntax nature.  All 
exceptions that are thrown because of a problem with the Sjava program specified in the cmd lin argument
extend this exception.

SymbolTableList.java - This is the class for the  SybolTableList, a data structure that holds our variables.

UndeclaredAssignmentException.java - This exception is thrown when the sjava program attempts to assign 
a value to a variable that hasn't been declared.  

UnmatchedSyntaxException.java - This exception is thrown when the line parsed doesn't 
match any of our regex formulas, and therefore must be incorrect.

WrongMethodNameException.java - This exception is thrown when a method is called with a name that 
doesn't exist.  

*****************************

PACKAGE: oop.ex6.scopes: This package contains the files that relate to checking the syntax
of code blocks and scopes: such as if statements, while loops and methods. It also contains the e
exceptions that they throw.  

IfWhile.java - This class performs static syntax validation checks on an if or while statement in 
Sjava document.  

IncorrectNumArgsException.java - This exception is thrown when a method is called with the incorrect number 
of args.  

InvalidParameterSyntaxException.java - This exception is thrown when the parameter declaration of a 
method is invalid.  

Method.java - This class implements the Method object, which houses all details of the method declared.

MethodNamespaceCollision.java - This exception is thrown when two methods have the same name.  

ParameterNotInitializedException - This exception is thrown when a method is called with passing arguments 
that haven't yet been initialized.


*****************************

PACKAGE: oop.ex6.types: This package contains the different Type objects and their superclass
Type.java and  the exceptions that they throw. 

AssignmentFromUninitializedVarException.java - This exception is thrown when one variable was assigned the 
value of another which wasn't initialized. 

AssignmentMismatchException.java - 

Boolean.java - This is the class for the Boolean Type variable.

Char.java - This is the class for the Char Type variable.

Double.java - This is the class for the Double Type variable.

FinalVariableException.java - This exception is thrown when a final variable is reassigned.

Int.java -

InvalidTypeException.java -

InvalidValueException.java - 

StringType.java - 

Type.java - The parent class for all the type objects (Int, Char, etc).

TypeAssignmentMismatch.java - 

TypeFactory.java - 

UninitializedFinalVariableException.java - 

******************************


=============================
=          Design           =
=============================

We chose to divide the program into 3 different packages based on their different purposes.  The main 
package contains the driver class "Sjavac" and it's main method as well as the parser (and of course 
all of the exceptions that are thrown by these classes, this will be the case in each package).
We decided to create objects for each type of variable, int, String, char etc, since in order 
to check the syntax of Sjava, we need the variables to persist so we can keep track of who they 
are (name) and what their value is, as well as if they've been initialized and are final etc.  
All the different varaible objects extend the Type superclass, both to adhere to the DRY principle
by centralizing all common code in one place, and to be able to refer to all of the different types
by type Type, like we do when we create the symbol table HashMaps of type <String, Type>.
 
 We used the factory paradigm for creating instances of the different types,


=============================
=  Implementation details   =
=============================


=============================
=    Answers to questions   =
=============================

